[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  colorscheme onedark
'''

[[plugins]]
repo = 'markonm/traces.vim'

# [[plugins]] # neovim not supported
# repo = 'skanehira/docker.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_add = '''
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_sidebar_width = 40
let g:vista_echo_cursor = 0

" let g:vista_default_executive = 'vim_lsp'
let g:vista_executive_for = {
    \ 'c': 'vim_lsp',
    \ 'cpp': 'vim_lsp',
    \ }

nnoremap <silent> <Leader>o :<C-u>Vista!!<CR>
'''

[[plugins]] # まーくだうん
repo = "tpope/vim-markdown"
hook_add = '''
autocmd BufNewFile, BufRead *.{md, mdwn, mkd, mkdn, mark*} set filetype=markdown
let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = [
\  'css',
\  'erb=eruby',
\  'js=javascript',
\  'ts=javascript',
\  'json=javascript',
\  'rb=ruby',
\  'py=python',
\  'sh',
\  'sql',
\  'c',
\  'cpp',
\  'ino=c',
\  'java',
\  'perl',
\  'go',
\  'sass',
\  'html',
\  'xml',
\  'firestore',
\  'yml=yaml',
\  'conf=dosini',
\  'Dockerfile',
\]

'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star)
  nmap # <Plug>(anzu-sharp)
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
let g:ctrlp_map = '<c-p>' " yankringとかぶるので・・・
let g:ctrlp_max_height = &lines
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.cache,*html/*
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.?(local|extlib|git|hg|svn|bundle|node_modules)$',
  \ }
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
nnoremap ,mn :MemoNew<cr>
nnoremap ,mg :MemoGrep<cr>
nnoremap ,mf :MemoList<CR>
" nnoremap ,mf :exe "CtrlP# g:memolist_path<cr><f5>
" let g:memolist_ex_cmd = 'NERDTree'
let g:memolist_path = "~/Dropbox/memo"
let g:memolist_fzf = 1
let g:memolist_ex_cmd = 'CtrlP'
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
let g:fzf_command_prefix = 'F'

" fzf settings
let $FZF_DEFAULT_OPTS="--layout=reverse"
let $FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git/**'"
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'sharp' } }

nnoremap <Leader>b :FBuffers<CR>
nnoremap <Leader>c :FCommands<CR>
nnoremap <Leader>f :FGFiles<CR>
nnoremap <Leader>h :FHistory<CR>
nnoremap <Leader>g :FAg<CR>
nnoremap <Leader>r :FRg<CR>

nnoremap rr/  :<C-u>FRg <C-R><C-w><CR>
vnoremap rr/ y:<C-u>FRg <C-R>"<CR>
'''

[[plugins]] # 爆速のgrepであるagを使いたい
repo = 'rking/ag.vim'
hook_add = '''
nnoremap gg/  :<C-u>Ag <C-R><C-w><CR>
vnoremap gg/ y:<C-u>Ag <C-R>"<CR>
'''

[[plugins]] # YAML
repo = 'stephpy/vim-yaml'

[[plugins]]# gcc or C-_でトグル
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-endwise'

# [[plugins]]
# repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
" NORMALモードのカーソル移動中に頻繁に切り替わるとうざいのでデフォは無効化しておく(helpは例外)
let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
" INSERTモードのON／OFFに合わせてトグル
augroup ContextFiletype
	autocmd!
	autocmd InsertEnter * :PreciousSwitch
	autocmd InsertLeave * :PreciousReset
augroup END
'''

[[plugins]] # 選択部分のキーワードを*を押して検索
repo = 'thinca/vim-visualstar'

[[plugins]] # devicon ;)
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 0
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
'''

# [[plugins]] # ファイルツリーを表示する。mを押すと、ファイル・ディレクトリの追加・削除・移動ができるのも便利
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# nnoremap <C-n> :NERDTreeToggle<CR>
# nnoremap <C-f> :NERDTreeFind<CR>
# autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
# autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
#     \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
# '''

[[plugins]]
repo = 'ms-jpq/chadtree'
rev = 'chad'
build = 'python3 -m chadtree deps'
hook_add = '''
nnoremap <C-n> :CHADopen<cr>
" nnoremap <C-f> :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
let g:blamer_enabled = 1
let g:blamer_date_format = '%y/%m/%d %H:%M'
'''

[[plugins]]
repo = 'skanehira/code2img.vim'

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]] # Firestore
repo = 'delphinus/vim-firestore'
hook_add = '''
autocmd BufNewFile,BufRead firestore.rules set filetype=firestore
'''

[[plugins]] # The fancy start screen for Vim.
repo = 'mhinz/vim-startify'

[[plugins]]
# 正規表現をPerl風に
# :%S///gc
# repo = 'othree/eregex.vim'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
map /  <Plug>(incsearch-forward)
'''

[[plugins]]
# ()や''でくくったりするための補助
# text-objectの支援
# di' で'の中身を削除
# da' で'も含めて削df
# cs'# cs"' などと囲っているものに対する操作ができる
# visualモードのときはSを代用
repo = "tpope/vim-surround"

[[plugins]]
# テキストオブジェクトを使い倒す
repo = 'kana/vim-operator-user.git'

[[plugins]]
# Rを使ってyankしてるものと置き換え
repo = 'kana/vim-operator-replace.git'
hook_add = '''
map R <Plug>(operator-replace)
'''

[[plugins]]
# キャメル・アンダースコア記法を扱いやすく
# , w , e , b
# v, w
# d, w
repo = 'bkad/CamelCaseMotion.git'
hook_add = '''
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge
'''

[[plugins]]
#  ","と押して", "としてくれる優しさ
repo = "vim-scripts/smartchr"
hook_add = '''
inoremap <expr> , smartchr#one_of(', ', ',')
'''

#  [[plugins]]
# # カーソルジェットコースター
# repo = 'rhysd/accelerated-jk.git'
# hook_add = '''
# let g:accelerated_jk_acceleration_table = [10,5,3]
# nmap j <Plug>(accelerated_jk_gj)
# nmap k <Plug>(accelerated_jk_gk)
# '''

[[plugins]]
# jkがいないなら
repo = 'easymotion/vim-easymotion'

# <Leader>f{char} to move to {char}
hook_add = '''
map  <Leader>F <Plug>(easymotion-bd-f)
nmap <Leader>F <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
vmap s <Plug>(easymotion-bd-f2)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0
let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_do_mapping = 0
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    " タブラインの表示
    let g:airline#extensions#tabline#enabled = 1
    " （タブが一個の場合）バッファのリストをタブラインに表示する機能をオフ
    let g:airline#extensions#tabline#show_buffers = 0
    " 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
    let g:airline#extensions#tabline#tab_nr_type = 1
    " パワーラインフォントの使用
    let g:airline_powerline_fonts = 1
    " aleの表示
    let g:airline#extensions#ale#enabled = 1
    " Do not collapse the status line while having multiple windows
    let g:airline_inactive_collapse = 0
    " tagbarの表示
    let g:airline#extensions#tagbar#enabled = 1
    " virtualenvを有効
    let g:airline#extensions#virtualenv#enabled = 1
'''

# [[plugins]] #括弧とかを自動で閉じてくれる
# repo = 'jiangmiao/auto-pairs'

[[plugins]] #同じインデントのところに縦線を引いてくれる奴
repo = 'Yggdroot/indentLine'
hook_add = '''
"indentline"
let g:indentLine_color_term =239
let g:indentLine_color_gui = '#708090'
let g:indentLine_char = '¦'
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
hook_source = '''
" let g:float_preview#docked = 1
let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft = ['javascript', 'typescript', 'jsx', 'css', 'scss', 'json', 'markdown']
hook_add = '''
" @formatアノテーションを持ったファイルの自動フォーマットを無効にする
let g:prettier#autoformat = 0

" Prettierのパースエラーをquickfixに表示しない
let g:prettier#quickfix_enabled = 0

autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.css,*.scss,*.json,*.md PrettierAsync
'''

# [[plugins]]
# repo = 'vim-syntastic/syntastic'
# hook_add = '''
# " set statusline+=%#warningmsg#
# " set statusline+=%{SyntasticStatuslineFlag()}
# " set statusline+=%*
#
# let g:syntastic_always_populate_loc_list = 1
# let g:syntastic_auto_loc_list = 1
# let g:syntastic_check_on_open = 1
# let g:syntastic_check_on_wq = 0
# let g:syntastic_javascript_checkers = ['eslint']
# let g:syntastic_mode_map = {
#       \ 'mode': 'active',
#       \ 'active_filetypes': ['javascript'],
#       \ 'passive_filetypes': []
#       \ }
#
# let g:syntastic_enable_signs = 1
# let g:syntastic_error_symbol = '✗'
# let g:syntastic_warning_symbol = '⚠'
# '''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif

if executable("typescript-language-server")
  " グローバルインストールされたnpmモジュールの保存場所
  let s:npm_root = trim(system("npm root -g"))

  " vim-lspのinitialization_optionsを使用して、typescript-deno-pluginのインストール場所をtypescript-language-serverへ伝えます
  let s:has_typescript_deno_plugin = isdirectory(s:npm_root . "/typescript-deno-plugin")
  let s:plugins = s:has_typescript_deno_plugin
    \ ? [{ "name": "typescript-deno-plugin", "location": s:npm_root }]
    \ : []
  augroup LspTypeScript
    autocmd!
    autocmd User lsp_setup call lsp#register_server({
    \   "name": "typescript-language-server",
    \   "cmd": {server_info -> ["typescript-language-server", "--stdio"]},
    \   "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
    \   "whitelist": ["typescript", "typescript.tsx", 'javascript', 'javascript.jsx'],
    \   "initialization_options": { "plugins": s:plugins },
    \ })
  augroup END
endif

let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_settings = {
\ 'efm-langserver': {
\   'disabled': v:false
\ }
\ }

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    " inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    " inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go,*.rb,*.py call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo =  'rust-lang/rust.vim'

[[plugins]]
repo = 'yangby/vim-rust-cargoclippy'
hook_add = '''
let g:syntastic_rust_checkers = ['cargoclippy', 'rustc']
'''

[[plugins]]
repo = 'ruby-formatter/rufo-vim'
build = 'gem install rufo'
hook_add = '''
let g:rufo_auto_formatting = 1
'''

[[plugins]]
repo = 'mattn/vim-goimports'

[[plugins]]
repo = 'yuezk/vim-js'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'vim-scripts/applescript.vim'
on_ft = ['applescript']
hook_add = '''
autocmd bufnewfile,bufread *.osascript,*.scpt,*.applescript :setl filetype=applescript
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'

[[plugins]]
repo = 'styled-components/vim-styled-components'

[[plugins]]
repo = 'jparise/vim-graphql'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <silent><leader>q :QuickRun<CR>  " キーマップの設定
let g:quickrun_config = {}

let g:quickrun_config._ = {
    \ 'outputter/error/success': 'buffer',
    \ 'outputter/error/error': 'quickfix',
    \ 'outputter/quickfix/open_cmd': 'copen',
    \ 'runner': 'vimproc',
    \ 'runner/vimproc/updatetime': 60,
    \ 'hook/time/enable': 1
    \ }

" おまけの設定 for Python
let g:quickrun_config.python = {
    \ 'command': '~/.pyenv/shims/python',
    \ 'cmdopt': '-u'
    \ }

let g:quickrun_config.cpp = {
    \ 'command': 'g++',
    \ 'input': 'input',
    \ 'runner': 'system'
    \ }
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
let g:switch_mapping = "-"
let g:switch_custom_definitions =
    \ [
    \   {
    \     '\<\(\l\)\(\l\+\(\u\l\+\)\+\)\>': '\=toupper(submatch(1)) . submatch(2)',
    \     '\<\(\u\l\+\)\(\u\l\+\)\+\>': "\\=tolower(substitute(submatch(0), '\\(\\l\\)\\(\\u\\)', '\\1_\\2', 'g'))",
    \     '\<\(\l\+\)\(_\l\+\)\+\>': '\U\0',
    \     '\<\(\u\+\)\(_\u\+\)\+\>': "\\=tolower(substitute(submatch(0), '_', '-', 'g'))",
    \     '\<\(\l\+\)\(-\l\+\)\+\>': "\\=substitute(submatch(0), '-\\(\\l\\)', '\\u\\1', 'g')",
    \   },
    \   ['is', 'are'],
    \   ['if', 'unless'],
    \   ['while', 'until'],
    \   ['.blank?', '.present?'],
    \   ['include', 'extend'],
    \   ['class', 'module'],
    \   ['.inject', '.delete_if'],
    \   ['.map', '.map!'],
    \   ['attr_accessor', 'attr_reader', 'attr_writer'],
    \   ['=', '<', '<=', '>', '>=', '~>'],
    \   ['yes?', 'no?'],
    \   ['lib', 'initializer', 'file', 'vendor', 'rakefile'],
    \   ['controller', 'model', 'view', 'migration', 'scaffold'],
    \   { '<!--\([a-zA-Z0-9 /]\+\)--></\(div\|ul\|li\|a\)>' : '</\2><!--\1-->' },
    \   [100, ':continue', ':information'],
    \   [101, ':switching_protocols'],
    \   [102, ':processing'],
    \   [200, ':ok', ':success'],
    \   [201, ':created'],
    \   [202, ':accepted'],
    \   [203, ':non_authoritative_information'],
    \   [204, ':no_content'],
    \   [205, ':reset_content'],
    \   [206, ':partial_content'],
    \   [207, ':multi_status'],
    \   [208, ':already_reported'],
    \   [226, ':im_used'],
    \   [300, ':multiple_choices'],
    \   [301, ':moved_permanently'],
    \   [302, ':found'],
    \   [303, ':see_other'],
    \   [304, ':not_modified'],
    \   [305, ':use_proxy'],
    \   [306, ':reserved'],
    \   [307, ':temporary_redirect'],
    \   [308, ':permanent_redirect'],
    \   [400, ':bad_request'],
    \   [401, ':unauthorized'],
    \   [402, ':payment_required'],
    \   [403, ':forbidden'],
    \   [404, ':not_found'],
    \   [405, ':method_not_allowed'],
    \   [406, ':not_acceptable'],
    \   [407, ':proxy_authentication_required'],
    \   [408, ':request_timeout'],
    \   [409, ':conflict'],
    \   [410, ':gone'],
    \   [411, ':length_required'],
    \   [412, ':precondition_failed'],
    \   [413, ':request_entity_too_large'],
    \   [414, ':request_uri_too_long'],
    \   [415, ':unsupported_media_type'],
    \   [416, ':requested_range_not_satisfiable'],
    \   [417, ':expectation_failed'],
    \   [422, ':unprocessable_entity'],
    \   [423, ':precondition_required'],
    \   [424, ':too_many_requests'],
    \   [426, ':request_header_fields_too_large'],
    \   [500, ':internal_server_error'],
    \   [501, ':not_implemented'],
    \   [502, ':bad_gateway'],
    \   [503, ':service_unavailable'],
    \   [504, ':gateway_timeout'],
    \   [505, ':http_version_not_supported'],
    \   [506, ':variant_also_negotiates'],
    \   [507, ':insufficient_storage'],
    \   [508, ':loop_detected'],
    \   [510, ':not_extended'],
    \   [511, ':network_authentication_required'],
    \   ['describe', 'context', 'specific', 'example'],
    \   ['before', 'after'],
    \   ['be_true', 'be_false'],
    \   ['get', 'post', 'put', 'delete'],
    \   ['==', 'eql', 'equal'],
    \   { '\.should_not': '\.should' },
    \   ['\.to_not', '\.to'],
    \   { '\([^. ]\+\)\.should\(_not\|\)': 'expect(\1)\.to\2' },
    \   { 'expect(\([^. ]\+\))\.to\(_not\|\)': '\1.should\2' },
    \   ['[ ]', '[x]'],
    \   ['☐', '☑']
    \ ]
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'


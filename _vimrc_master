"------------------------------------
" NeoBundle settings
"------------------------------------
set nocompatible
filetype off
filetype plugin indent off
" for go
if $GOROOT != ''
  set rtp+=$GOROOT/misc/vim
endif
set rtp+=~/dotfiles/neobundle.git/
if has('vim_starting')
  set runtimepath+=~/dotfiles/neobundle.vim
  call neobundle#rc(expand('~/.vim/'))
endif

" JS支援
NeoBundle 'pangloss/vim-javascript.git'
let g:html_indent_inctags  = "html, body, head, tbody"
let g:html_indent_autotags = "th, td, tr, tfoot, thead"
let g:html_indent_script1  = "inc"
let g:html_indent_style1   = "inc"
NeoBundle 'open-browser.vim'
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
NeoBundle 'mattn/webapi-vim'
NeoBundle 'tell-k/vim-browsereload-mac'
let g:returnApp = "iTerm"
nnoremap <Space><Space>br :ChromeReloadStart<CR>
nnoremap <Space><Space>BR :ChromeReloadStop<CR>
" nmap <Space>bf :FirefoxReloadStart<CR>
" nmap <Space>bF :FirefoxReloadStop<CR>
" nmap <Space>bs :SafariReloadStart<CR>
" nmap <Space>bS :SafariReloadStop<CR>
" nmap <Space>bo :OperaReloadStart<CR>
" nmap <Space>bO :OperaReloadStop<CR>
" nmap <Space>ba :AllBrowserReloadStart<CR>
" nmap <Space>bA :AllBrowserReloadStop<CR>
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'jiangmiao/simple-javascript-indenter'
NeoBundle 'jQuery.git'
NeoBundle 'jelera/vim-javascript-syntax.git'
NeoBundle 'teramako/jscomplete-vim.git'
" DOMとMozilla関連とES6のメソッドを補完
let g:jscomplete_use = ['dom',  'moz',  'es6th']

" CofeeScript syntax + 自動compile
NeoBundle 'kchmck/vim-coffee-script'
autocmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!
" js BDDツール
NeoBundle 'claco/jasmine.vim'
" indentの深さに色を付ける
NeoBundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level           = 2
let g:indent_guides_auto_colors           = 1
let g:indent_guides_guide_size            = 1

" 選択部分のキーワードを*を押して検索
NeoBundle 'thinca/vim-visualstar'

" Vimperator風に移動できる
" 実行：\\bで後方へ移動、\\wで前方へ移動
NeoBundle 'Lokaltog/vim-easymotion'
"嫌だったのでspace spaceに変更
let g:EasyMotion_leader_key = '<Space>'
let g:EasyMotion_grouping   = 1
let g:EasyMotion_keys       = 'fjdkslaureiwoqpvncm'
let g:EasyMotion_do_shade   = 0

" 簡単にコメントアウトする
" gcc or C-_でトグル
NeoBundle 'tomtom/tcomment_vim'

" いろんな言語で作成するときのひな形を入力したい
NeoBundle 'mattn/sonictemplate-vim'

" color shcheme
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'ujihisa/unite-font'
NeoBundle 'tomasr/molokai'
colorscheme molokai

" Shogoさんの力を借りる
NeoBundle 'Shougo/vimproc', {
      \     'build': {
      \        'windows': 'make_mingw64.mak',
      \        'unix': 'make -f make_unix.mak',
      \        'mac': 'make -f make_mac.mak'
      \     }
      \   }

NeoBundle 'thinca/vim-qfreplace.git'

" APIのドキュメントを参照する
" Shift+K
NeoBundle 'thinca/vim-ref'
let g:ref_open = 'vsplit'
let g:ref_refe_cmd = "rurema"
let g:ref_refe_version = 2

" 正規表現をPerl風に
" :%S///gc
NeoBundle 'othree/eregex.vim'
nnoremap / :M/

" ヤンクを辿れるようにする
NeoBundle "YankRing.vim"
let g:yankring_manual_clipboard_check = 0
let g:yankring_max_history            = 30
let g:yankring_max_display            = 70
" Yankの履歴参照
nmap ,y :YRShow<CR>

" 英語の補完を行う
NeoBundle 'ujihisa/neco-look.git'

" \rで開いているコードを実行
NeoBundle "thinca/vim-quickrun.git"
" for quickrun.vim
let g:quickrun_config            = {}
let g:quickrun_config.objc       = {
      \   'command': 'clang',
      \   'exec': ['%c %s -o %s:p:r -framework Foundation', '%s:p:r %a', 'rm -f %s:p:r'],
      \   'tempfile': '{tempname()}.m',
      \ }
let g:quickrun_config.processing = {
      \   'command': 'processing-java',
      \   'exec': '%c --sketch     = $PWD/ --output = /Library/Processing --run --force',
      \ }
let g:quickrun_config.markdown   = {
      \   'outputter' : 'null',
      \   'command'   : 'open',
      \   'exec'      : '%c %s',
      \ }
let g:quickrun_config.coffee     = {
      \   'command' : 'coffee',
      \   'exec' : ['%c -cbp %s']
      \ }
let g:quickrun_config.perl = {
      \   'command' : 'perl',
      \   'cmdopt': '-MProject::Libs'
      \ }

" VimからRSecを実行する
NeoBundle "skwp/vim-rspec.git"
nnoremap <silent> ,rs :RunSpec<CR>
nnoremap <silent> ,rl :RunSpecLine<CR>

" vimでzencodingする
" Ctrl+y,
NeoBundle "mattn/zencoding-vim.git"
let g:user_zen_settings = { 'indentation' : '    ', }

" Programming perl
NeoBundle "c9s/perlomni.vim"
NeoBundle "mattn/perlvalidate-vim.git"
NeoBundle "petdance/vim-perl"
NeoBundle "y-uuki/unite-perl-module.vim"
NeoBundle "y-uuki/perl-local-lib-path.vim"
autocmd FileType perl PerlLocalLibPath
nnoremap ,pt <Esc>:%! perltidy -se<CR>
vnoremap ,pt <Esc>:'<,'>! perltidy -se<CR>

" cpanfile用
NeoBundle 'moznion/vim-cpanfile'
NeoBundle 'moznion/syntastic-cpanfile'

" 全般的に文法チェック
NeoBundle 'scrooloose/syntastic.git'

" ()や''でくくったりするための補助
" text-objectの支援
" vi' で'の中身を選択
" va' で'も含めて選択 だが
" cs'" cs"' などと囲っているものに対する操作ができる
" visualモードのときはSを代用
NeoBundle "tpope/vim-surround"

" %の拡張
NeoBundle "tmhedberg/matchit.git"

" =と押して = となるようにする他
NeoBundle "smartchr"
" inoremap <expr> = smartchr#loop(' = ', ' => ', '=', ' == ')
inoremap <expr> , smartchr#one_of(', ', ',')

" endfunction とかを自動入力
NeoBundle 'tpope/vim-endwise'

" 前回の操作を.で繰り返す
NeoBundle 'repeat.vim'

" Ruby環境
NeoBundle 'vim-ruby/vim-ruby.git'
NeoBundle 'tpope/vim-rbenv.git'
" NeoBundle 'tpope/vim-rails.git'
" NeoBundle 'taichouchou2/vim-rsense'
au BufNewFile, BufRead Gemfile setl filetype = Gemfile
au BufWritePost Gemfile call vimproc#system('rbenv ctags')

" let g:rubycomplete_buffer_loading = 1
" let g:rubycomplete_classes_in_global = 1
" let g:rubycomplete_rails = 1
" imap <C-o> <C-x><C-o>

" Vimでプレゼンする？
NeoBundle 'thinca/vim-showtime.git'

" undo treeを表示する
NeoBundle 'sjl/gundo.vim.git'
nnoremap U      :<C-u>GundoToggle<CR>

" 整列を割と自動でやってくれる
" 例えば:Alignta = で=でそろえてくれる
NeoBundle 'h1mesuke/vim-alignta.git'
xnoremap <silent> a: :Alignta  01 :<CR>
xnoremap al :Alignta<Space>

" set ambiwidth=double

" キャメル・アンダースコア記法を扱いやすく
" ,w ,e ,b
" v,w
" d,w
NeoBundle 'bkad/CamelCaseMotion.git'
map w ,w
map e ,e
map b ,b

" ステータスラインをかっこ良く
NeoBundle 'Lokaltog/vim-powerline.git'
let g:Powerline_symbols='fancy'

" vimからgitをいじる
NeoBundle 'kmnk/vim-unite-giti.git'

" 読み込みの遅延を測定する
" 以下で実行
" :BenchVimrc
NeoBundle 'mattn/benchvimrc-vim.git'

" HTML5
NeoBundle 'othree/html5.vim.git'

" テキストオブジェクトで置換
NeoBundle 'kana/vim-operator-replace.git'
NeoBundle 'kana/vim-operator-user.git'
map R <Plug>(operator-replace)

" ファイルを曖昧文字から探し出す
NeoBundle 'kien/ctrlp.vim.git'
let g:ctrlp_max_height = &lines
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.?(extlib|git|hg|svn)$',
  \ }

" メモを簡単に取る
NeoBundle 'glidenote/memolist.vim'
let g:memolist_path = $HOME . "/Dropbox/アプリ/memolist"
let g:memolist_qfixgrep = 1
nnoremap <silent> ,mn :MemoNew<CR>
nnoremap <silent> ,ml :MemoList<CR>
nnoremap <silent> ,mg :MemoGrep<CR>
nnoremap <silent> ,mf :exe "CtrlP" g:memolist_path<cr><f5>

" DayOne投稿用(開発中)
NeoBundle 'kazuph/dayone.vim'
nnoremap <silent> ,dn :DayOneNew<CR>
nnoremap <silent> ,dl :DayOneList<CR>
nnoremap <silent> ,dg :DayOneGrep<CR>

" 爆速のgrepであるagを使いたい
NeoBundle 'rking/ag.vim'
nnoremap gg/  :<C-u>Ag <C-R><C-w><CR>
vnoremap gg/ y:<C-u>Ag <C-R>"<CR>

" RubyMotionの設定
" TODO:Rubyのときは発動しないようにする
" NeoBundle 'kazuph/snipmate-snippets-rubymotion.git'

" Haskell
NeoBundle 'haskell.vim'
NeoBundle 'dag/vim2hs.git'
NeoBundle 'eagletmt/ghcmod-vim.git'
NeoBundle 'ujihisa/neco-ghc.git'

" tmuxやscreenでもヤンクをクリップボードへコピー
NeoBundle 'kana/vim-fakeclip.git'

" Vimがしゃべるとうれしい・・・よね？
NeoBundle 'supermomonga/shaberu.vim'
let g:shaberu_user_define_say_command = 'say -v Kyoko '

" 賢いf
NeoBundle 'rhysd/clever-f.vim'

" 走り幅跳び！
NeoBundle 'mattn/habatobi-vim'

" カーソル移動を加速する
NeoBundle 'rhysd/accelerated-jk.git'
let g:accelerated_jk_acceleration_table = [10,5,3]
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

" 日本語固定モード
NeoBundle 'fuenor/im_control.vim'
"<C-^>でIM制御が行える場合の設定
let IM_CtrlMode = 4
""ctrl+jで日本語入力固定モードをOnOff
inoremap <silent> <C-j> <C-^><C-r>=IMState('FixMode')<CR>

" 前から連番機能欲しかった
NeoBundle 'deris/vim-rengbang'
vnoremap ,rb  <Esc>:'<,'>RengBang

" 久しぶりにProcessingが書きたいんだ!
NeoBundle 'sophacles/vim-processing.git'

" AppleScriptを書く
NeoBundle 'applescript.vim.git'

" ST2のようにテキスト操作
NeoBundle 'terryma/vim-multiple-cursors.git'

" 急遽バイナリを弄りたく
NeoBundle 'Shougo/vinarise'
NeoBundle 's-yukikaze/vinarise-plugin-peanalysis'

" ちょっとゴニョゴニョしたいときに
NeoBundle 'scratch.vim'

" gitの差分を表示するぜ
NeoBundle 'airblade/vim-gitgutter'
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>

" 以下shougoさんの独壇場
NeoBundle 'Shougo/neocomplcache',  '',  'default'
call neobundle#config('neocomplcache',  {
      \ 'lazy' : 1,
      \ 'autoload' : {
      \   'commands' : 'NeoComplCacheEnable',
      \ }})
NeoBundle 'Shougo/neocomplcache-rsense',  '',  'default'
call neobundle#config('neocomplcache-rsense',  {
      \ 'lazy' : 1,
      \ 'depends' : 'Shougo/neocomplcache',
      \ 'autoload' : { 'filetypes' : 'ruby' }
      \ })
NeoBundle 'Shougo/neosnippet',  '',  'default'
call neobundle#config('neosnippet',  {
      \ 'lazy' : 1,
      \ 'autoload' : {
      \   'insert' : 1,
      \   'filetypes' : 'snippet',
      \   'unite_sources' : ['snippet',  'neosnippet/user',  'neosnippet/runtime'],
      \ }})

set completeopt-=preview
" set completeopt=menu,preview
NeoBundle 'kazuph/snipmate-snippets.git'
NeoBundle 'tsukkee/unite-tag.git'
autocmd BufEnter *
            \   if empty(&buftype)
            \|      nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately tag<CR>
            \|  endif
NeoBundle 'h1mesuke/unite-outline'

" NeoBundle 'Shougo/vimfiler.git'
NeoBundle 'Shougo/vimfiler',  '',  'default'
call neobundle#config('vimfiler',  {
      \ 'lazy' : 1,
      \ 'depends' : 'Shougo/unite.vim',
      \ 'autoload' : {
      \    'commands' : [
      \                  { 'name' : 'VimFiler',
      \                    'complete' : 'customlist, vimfiler#complete' },
      \                  { 'name' : 'VimFilerExplorer',
      \                    'complete' : 'customlist, vimfiler#complete' },
      \                  { 'name' : 'Edit',
      \                    'complete' : 'customlist, vimfiler#complete' },
      \                  { 'name' : 'Write',
      \                    'complete' : 'customlist, vimfiler#complete' },
      \                  'Read',  'Source'],
      \    'mappings' : ['<Plug>(vimfiler_switch)'],
      \    'explorer' : 1,
      \ }
      \ })
" NeoBundleLazy 'Shougo/vimfiler', {
" \   'autoload' : { 'commands' : [ 'VimFiler' ] },
" \   'depends': [ 'Shougo/unite.vim' ],
" \ }
let s:bundle = neobundle#get('vimfiler')
function! s:bundle.hooks.on_source(bundle)
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_safe_mode_by_default = 0
endfunction
nnoremap ,vf :VimFiler -split -simple -winwidth=35 -no-quit<CR>
autocmd FileType vimfiler
        \ nnoremap <buffer><silent>/
        \ :<C-u>Unite file -default-action=vimfiler<CR>

" NeoBundle 'Shougo/vimshell.git'
NeoBundleLazy 'Shougo/vimshell', {
\   'autoload' : { 'commands' : [ 'VimShell' ] },
\   'depends': [ 'Shougo/vimproc' ],
\ }
let s:bundle = neobundle#get('vimshell')
function! s:bundle.hooks.on_source(bundle)
endfunction
nnoremap ,vs :VimShell<CR>

NeoBundle 'Shougo/unite.vim',  '',  'default'
" call neobundle#config('unite.vim', {
"       \ 'lazy' : 1,
"       \ 'autoload' : {
"       \   'commands' : [{ 'name' : 'Unite',
"       \                   'complete' : 'customlist, unite#complete_source'},
"       \                 'UniteWithBufferDir', 'UniteWithCursorWord',  'UniteWithInput']
"       \ }})
" NeoBundleLazy 'Shougo/unite.vim', {
"       \ 'autoload' : {
"       \     'commands' : ['Unite', 'UniteWithBufferDir',
"       \                  'UniteWithCursorWord', 'UniteWithInput'],
"       \     'functions' : 'unite#start'
"       \     }
"       \ }

let s:bundle = neobundle#get('unite.vim')
function! s:bundle.hooks.on_source(bundle)
  let g:unite_update_time = 1000
  let g:unite_enable_start_insert=1
  let g:unite_source_file_mru_filename_format = ''
  let g:unite_source_grep_default_opts = "-Hn --color=never"
  let g:loaded_unite_source_bookmark = 1
  let g:loaded_unite_source_tab = 1
  let g:loaded_unite_source_window = 1
  " the silver searcher を unite-grep のバックエンドにする
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup --column'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_max_candidates = 200
  endif

  " ウィンドウを分割して開く
  au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
  au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
  " ウィンドウを縦に分割して開く
  au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
  au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
  au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
  au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    " Overwrite settings.
    imap <buffer> jj <Plug>(unite_insert_leave)
    imap <buffer> <ESC> <ESC><ESC>
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
    nnoremap <buffer> t G
    startinsert
  endfunction
  call unite#custom_default_action('source/bookmark/directory', 'vimfiler')
endfunction
"------------------------------------------------------ unite.vim
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" ブックマーク一覧
nnoremap <silent> ,ub :<C-u>Unite bookmark<CR>
" ブックマーク追加
nnoremap <silent> ,ua :<C-u>UniteBookmarkAdd<CR>
" yank一覧
nnoremap <silent> ,uy :<C-u>Unite -buffer-name=register register<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" tag
nnoremap <silent> ,ut :Unite tag/include<CR>
" unite-grep
nnoremap <silent> ,ug :Unite -no-quit -winheight=15 grep<CR>
" source
nnoremap <silent> ,us :Unite source<CR>
" ref
nnoremap <silent> ,ur :Unite ref/
" color scheme の変更
nnoremap <silent> ,uc :Unite colorscheme<CR>
" outline表示
nnoremap <silent> ,uo : <C-u>Unite -no-quit -vertical -winwidth=30 outline<CR>
" git status
nnoremap <silent> ,gs :Unite giti/status<CR>
" git log
nnoremap <silent> ,gl :Unite giti/log<CR>

"-------------------------------------------------------------------setting neocomplcache
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
" let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
" let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
" let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 1
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" "リスト表示
let g:neocomplcache_max_list = 300
let g:neocomplcache_max_keyword_width = 20

let g:neocomplcache_enable_fuzzy_completion = 1
let g:neocomplcache_fuzzy_completion_start_length = 2

let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/snipmate-snippets/snippets, ~/dotfiles/snippets,  ~/.vim/snipmate-snippets-rubymotion/snippets'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'perl'     : $HOME . '/dotfiles/dict/perl.dict',
      \ 'ruby'     : $HOME . '/dotfiles/dict/ruby.dict',
      \ 'scheme'   : $HOME.'/.gosh_completions',
      \ 'cpanfile' : $HOME . '/.vim/bundle/vim-cpanfile/dict/cpanfile.dict'
      \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*|\h\w*::'
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'

" <TAB>: completion.
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" ctags
let g:neocomplcache_ctags_arguments_list = {
  \ 'perl' : '-R -h ".pm"',
  \ }

"--------------------------------------------------------------------------
" BasicSetting
"--------------------------------------------------------------------------
" ファイル名と内容をもとにファイルタイププラグインを有効にする
filetype plugin indent on
" ハイライトON
syntax on
" 認識されないっぽいファイルタイプを追加
au BufNewFile,BufRead *.psgi       set filetype=perl
au BufNewFile,BufRead *.t          set filetype=perl
au BufNewFile,BufRead *.ejs        set filetype=html
au BufNewFile,BufRead *.ep         set filetype=html
au BufNewFile,BufRead *.pde        set filetype=processing
au BufNewFile,BufRead *.erb        set filetype=html
au BufNewFile,BufRead *.tt         set filetype=html
au BufNewFile,BufRead *.tt2        set filetype=html
au BufNewFile,BufRead *.scss       set filetype=scss
au BufNewFile,BufRead cpanfile     set filetype=cpanfile
au BufNewFile,BufRead cpanfile     set syntax=perl.cpanfile
au BufRead, BufNewFile jquery.*.js set ft=javascript syntax=jquery

" ファイルエンコーディング
set fileencodings=ucs-bom,utf-8,iso-2022-jp,sjis,cp932,euc-jp,cp20932
set encoding=utf-8
" 未保存のバッファでも裏に保持
set hidden
" コマンドラインでの補完候補が表示されるようになる
set wildmenu
" コマンドをステータス行に表示
set showcmd
" 検索語を強調表示
set hlsearch
" 検索時に大文字・小文字を区別しない。ただし、検索後に大文字小文字が
" 混在しているときは区別する
set ignorecase
set smartcase
" オートインデント
set autoindent
set smartindent
" 10進法でインクリメント
set nf=""
" 画面最下行にルーラーを表示する
set ruler

" ステータスラインを常に表示する
set laststatus=2

" <F11>キーで'paste'と'nopaste'を切り替える
set pastetoggle=<F11>

set cindent
set tabstop=4
set shiftwidth=4
autocmd FileType apache     setlocal sw=4 sts=4 ts=4 et
autocmd FileType aspvbs     setlocal sw=4 sts=4 ts=4 et
autocmd FileType c          setlocal sw=4 sts=4 ts=4 et
autocmd FileType cpp        setlocal sw=4 sts=4 ts=4 et
autocmd FileType cs         setlocal sw=4 sts=4 ts=4 et
autocmd FileType css        setlocal sw=2 sts=2 ts=2 et
autocmd FileType diff       setlocal sw=4 sts=4 ts=4 et
autocmd FileType eruby      setlocal sw=4 sts=4 ts=4 et
autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
autocmd FileType java       setlocal sw=4 sts=4 ts=4 et
autocmd FileType javascript setlocal sw=2 sts=2 ts=2 et
autocmd FileType coffee     setlocal sw=2 sts=2 ts=2 et
autocmd FileType perl       setlocal sw=4 sts=4 ts=4 et
autocmd FileType php        setlocal sw=4 sts=4 ts=4 et
autocmd FileType python     setlocal sw=4 sts=4 ts=4 et
autocmd FileType ruby       setlocal sw=2 sts=2 ts=2 et
autocmd FileType haml       setlocal sw=2 sts=2 ts=2 et
autocmd FileType sh         setlocal sw=4 sts=4 ts=4 et
autocmd FileType sql        setlocal sw=4 sts=4 ts=4 et
autocmd FileType vb         setlocal sw=4 sts=4 ts=4 et
autocmd FileType vim        setlocal sw=2 sts=2 ts=2 et
autocmd FileType wsh        setlocal sw=4 sts=4 ts=4 et
autocmd FileType xhtml      setlocal sw=2 sts=2 ts=2 et
autocmd FileType xml        setlocal sw=4 sts=4 ts=4 et
autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
autocmd FileType zsh        setlocal sw=4 sts=4 ts=4 et
autocmd FileType scala      setlocal sw=2 sts=2 ts=2 et
autocmd FileType scheme     setlocal sw=2 sts=2 ts=2 et

set autoread
set expandtab
set cmdheight=2
set showmode                     " 現在のモードを表示
set modelines=0                  " モードラインは無効
set showmatch
set number
set list
set listchars=tab:»-,trail:-,nbsp:%
set display=uhex
set t_Co=256

" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" カーソル行をハイライト
set cursorline
" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END

hi clear CursorLine
hi CursorLine gui=underline
highlight CursorLine ctermbg=black guibg=black

" コマンド実行中は再描画しない
set lazyredraw

nnoremap <ESC><ESC> :nohlsearch<CR><ESC>
noremap ; :
noremap : ;

" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
" 保存時にtabをスペースに変換する
autocmd BufWritePre * :%s/\t/    /ge

" vimgrep検索時に結果一覧を自動的に開く
augroup grepopen
  autocmd!
  autocmd QuickFixCmdPost vimgrep cw
  autocmd QuickFixCmdPost grep cw
augroup END

" quickfixの修正
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>
nnoremap [Q :<C-u>cfirst<CR>
nnoremap ]Q :<C-u>clast<CR>

" CTRL-hjklでウィンドウ移動
" nnoremap 0 ^
" nnoremap 9 $

"カーソルを表示行で移動する。物理行移動は<C-n>, <C-p>
" nnoremap j gj
" nnoremap k gk

" スクロールしても常にカーソルが中央にあるようにする
" 飽きた
" set scrolloff=1000

" visualmodeでインテントを＞＜の連打で変更できるようにする
vnoremap < <gv
vnoremap > >gv

" ファイルを開いた時に最後のカーソル位置を再現する
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" 無限undo
if has('persistent_undo')
  set undodir=~/.vim/undo
  set undofile
endif

" OS依存
" OSのクリップボードを使用する
" set clipboard=unnamed
set clipboard+=unnamedplus,unnamed

" ターミナルでマウスを使用できるようにする
set mouse=a
set guioptions+=a
set ttymouse=xterm2

" テンプレートの設定
autocmd BufNewFile *.rb 0r ~/dotfiles/templates/rb.tpl
autocmd BufNewFile *.pl 0r ~/dotfiles/templates/pl.tpl

" .vimrcを瞬時に開く
nnoremap <Space><Space>. :e $MYVIMRC<CR>

" snippets/perl.snipを瞬時に開く
nnoremap <Space><Space>ps :e $HOME/dotfiles/snippets/perl.snip<CR>
nnoremap <Space><Space>pd :e $HOME/dotfiles/dict/perl.dict<CR>

" snippets/ruby.snipを瞬時に開く
nnoremap <Space><Space>rs :e $HOME/dotfiles/snippets/ruby.snip<CR>
nnoremap <Space><Space>rd :e $HOME/dotfiles/dict/ruby.dict<CR>

" vimrcの設定を反映
nnoremap <Space><Space>.. :<C-u>source $MYVIMRC<CR>

" 念の為C-cでEsc
inoremap <C-c> <Esc>

" テキスト全選択
nnoremap <silent><S-a> gg<S-v>G

" 検索語が真ん中に来るようにする
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

" ヘルプを3倍の速度で引く
nnoremap <C-h>  :<C-u>help<Space><C-r><C-w><CR>

" ヘルプを日本語に
set helplang=ja

" カーソル下の単語を置換
nnoremap g/ :<C-u>%s/<C-R><C-w>//gc<Left><Left><Left>

" ビジュアルモードで選択した部分を置換
vnoremap g/ y:<C-u>%s/<C-R>"//gc<Left><Left><Left>

" 行末までをヤンク
nmap Y y$

" コマンドモードのマッピング
cmap <C-a> <Home>
cmap <C-b> <Left>
cmap <C-f> <Right>
cmap <C-d> <Del>

" インサートモードのマッピング
inoremap <C-e> <End>
inoremap <C-a> <C-o>^
inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-d> <Del>

" バックアップを取らない
set nobackup

" no bell
set vb t_vb=

" :CDでカレントディレクトリを移動する
command! -nargs=? -complete=dir -bang CD  call s:ChangeCurrentDir('<args>', '<bang>')
function! s:ChangeCurrentDir(directory, bang)
    if a:directory == ''
        lcd %:p:h
    else
        execute 'lcd' . a:directory
    endif

    if a:bang == ''
        pwd
    endif
endfunction

" Change current directory.
nnoremap <silent> <Space>cd :<C-u>CD<CR>


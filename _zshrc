# Path to your oh-my-zsh configuration.
# stop the beep
ZSH=$HOME/.oh-my-zsh
export LANG=ja_JP.UTF-8
ZSH_THEME="skaro"
# ZSH_THEME="robbyrussell"
# ZSH_THEME="tonotdo"
plugins=(svn git perl ruby linux osx)
source $ZSH/oh-my-zsh.sh
# Customize to your needs...
alias tmux="TERM=xterm-256color tmux -u"
# "v"でデフォルトのviを立ち上げる
alias v="vim -u NONE --noplugin"
vim_version=`vim --version | head -1 | sed 's/^.*\ \([0-9]\)\.\([0-9]\)\ .*$/\1\2/'`
alias less='/usr/share/vim/vim${vim_version}/macros/less.sh'

# nvm と指定されたバージョンの Node.js がインストール済みの場合だけ
# 設定を有効にする
if [[ -f ~/.nvm/nvm.sh ]]; then
    source ~/.nvm/nvm.sh
    # if which nvm >/dev/null 2>&1 ;then ちょっと動作が不安定だったのでコメント
    _nodejs_use_version="v0.8.9"
    if nvm ls | grep -F -e "${_nodejs_use_version}" >/dev/null 2>&1 ;then
        nvm use "${_nodejs_use_version}" >/dev/null
        export NODE_PATH=${NVM_PATH}_modules${NODE_PATH:+:}${NODE_PATH}
    fi
    unset _nodejs_use_version
    # fi
fi

export PATH=$PATH:~/android-sdks/tools:~/android-sdks/platform-tools
export PATH=$PATH:/opt/local/bin

# z.sh
_Z_CMD=j
source ~/dotfiles/z/z.sh
precmd() {
  _z --add "$(pwd -P)"
}

# auto-fu.zh
# 魅力がわからなくなった
# if [ -f ~/dotfiles/auto-fu.zsh/auto-fu.zsh ]; then
#     source ~/dotfiles/auto-fu.zsh/auto-fu.zsh
#     zle-line-init () {auto-fu-init;}; zle -N zle-line-init
#     zstyle ':completion:*' completer _oldlist _complete
# fi

# rsense
export RSENSE_HOME=$HOME/.vim/rsense/rsense-0.3

# auto rehash
function gem(){
    $HOME/.rbenv/shims/gem $*
    if [ "$1" = "install" ] || [ "$1" = "i" ] || [ "$1" = "uninstall" ] || [ "$1" = "uni" ]
    then
        rbenv rehash
        rehash
    fi
}

alias em="TERM=xterm-256color /usr/local/Cellar/emacs/24.2/bin/emacs"
alias vimupdate="vim +NeoBundleUpdate +qa"

# design
ZSH_THEME_GIT_PROMPT_PREFIX="[⭠ %{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%}] %{$fg[yellow]%}✗%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%}]"
PROMPT='`exitStatus=$?;if [ ! $exitStatus -eq 0 ];then which growlnotify > /dev/null 2>&1 && growlnotify -t error! -m "see result" ;fi;`🍺  %{%(?.$fg_bold[green].$fg_bold[red])%}%h %{$fg[cyan]%}%2~ %{$fg_bold[blue]%}$(git_prompt_info) %{$reset_color%}» '

function extract() {
  case $1 in
    *.tar.gz|*.tgz) tar xzvf $1;;
    *.tar.xz) tar Jxvf $1;;
    *.zip) unzip $1;;
    *.lzh) lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z) tar zxvf $1;;
    *.gz) gzip -dc $1;;
    *.bz2) bzip2 -dc $1;;
    *.Z) uncompress $1;;
    *.tar) tar xvf $1;;
    *.arj) unarj $1;;
  esac
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz}=extract

## tmux自動起動
# http://d.hatena.ne.jp/tyru/20100828/run_tmux_or_screen_at_shell_startup
is_screen_running() {
    # tscreen also uses this varariable.
    [ ! -z "$WINDOW" ]
}
is_tmux_runnning() {
    [ ! -z "$TMUX" ]
}
is_screen_or_tmux_running() {
    is_screen_running || is_tmux_runnning
}
shell_has_started_interactively() {
    [ ! -z "$PS1" ]
}
if ! is_screen_or_tmux_running && shell_has_started_interactively; then
    tmux
fi
PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

show_buffer_stack() {
  POSTDISPLAY="
stack: $LBUFFER"
  zle push-line
}
zle -N show_buffer_stack
bindkey "^[q" show_buffer_stack

# for mac
# which test gdate > /dev/null 2>&1
# if [ $? -eq 0 ] ; then
#     alias date="$brew_prefix/bin/gdate"
# fi
# alias date="gdate"

setopt no_share_history

_tmux() {
    compadd attach-session bind-key break-pane capture-pane choose-buffer choose-client choose-list choose-session choose-tree choose-window clear-history clock-mode command-prompt confirm-before copy-mode delete-buffer detach-client display-message display-panes find-window has-session if-shell join-pane kill-pane kill-server kill-session kill-window last-pane last-window link-window list-buffers list-clients list-commands list-keys list-panes list-sessions list-windows load-buffer lock-client lock-server lock-session move-pane move-window new-session new-window next-layout next-window paste-buffer pipe-pane previous-layout previous-window refresh-client rename-session rename-window resize-pane respawn-pane respawn-window rotate-window run-shell save-buffer select-layout select-pane select-window send-keys send-prefix server-info set-buffer set-environment set-option set-window-option show-buffer show-environment show-messages show-options show-window-options source-file split-window start-server suspend-client swap-pane swap-window switch-client unbind-key unlink-window
}
compdef _tmux tmux

_plenv() {

    local -a cmds

    if (( CURRENT == 2 ));then
        compadd init rehash exec which version help global local install list versions list_modules install_cpanm available migrate_modules
    else
        if [ $words[CURRENT-1] = 'local' -o  $words[CURRENT-1] = 'global' -o $words[CURRENT-1] = 'migrate_modules' -o $words[CURRENT-2] = 'migrate_modules' ];then
            compadd `plenv list | sed -e 's/\*//g' -e 's/ //g'`
        fi
    fi

    return 1;
}
compdef _plenv plenv
